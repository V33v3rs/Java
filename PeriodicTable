/**
 * KIT107 Assignment 1
 *
 * Periodic Table Printer Interface
 *
 * @AUTHORS
 * @version DATE ON SUBMISSION
 * 
 * This file is UNCOMPLETE
 *
 * Class file for a periodic table. Used by harness class to create periodic table objects.
 * Consists of an array of elements (1 - 118), two ints behaving as the range of the table output and
 * a boolean for boolean conditions. The Class contains callable methods that, when called, will print the selected
 * range of the periodic table.
 * 
 */
import java.util.Scanner;

public class PeriodicTable implements PeriodicTableInterface{
    
    Scanner in = new Scanner(System.in); //Imported for scanner interface with the user - the constructor needs to gather input from the user.
    protected int firstEle; //Start of boundary of the range the user selects to view from the table.
    protected int lastEle; //End of the boundary of the range the user selects to view from the table. 
    protected boolean userAnswer; //True or false, will allow the program to decide wether or not it will show the user the lan/anth groups.
    protected final String[][] table = {{"H","1"},{"He","18"},{"Li","1"},{"Be","2"},{"B","13"},{"C","14"},{"N","15"},{"O","16"},{"F","17"},{"Ne","18"},
            {"Na","1"},{"Mg","2"},{"Al","13"},{"Si","14"},{"P","15"},{"S","16"},{"Cl","17"},{"Ar","18"},{"K","1"},{"Ca","2"},
            {"Sc","3"},{"Ti","4"},{"V","5"},{"Cr","6"},{"Mn","7"},{"Fe","8"},{"Co","9"},{"Ni","10"},{"Cu","11"},{"Zn","12"},
            {"Ga","13"},{"Ge","14"},{"As","15"},{"Se","16"},{"Br","17"},{"Kr","18"},{"Rb","1"},{"Sr","2"},{"Y","3"},{"Zr","4"},
            {"Nb","5"},{"Mo","6"},{"Tc","7"},{"Ru","8"},{"Rh","9"},{"Pd","10"},{"Ag","11"},{"Cd","12"},{"In","13"},{"Sn","14"},
            {"Sb","15"},{"Te","16"},{"I","17"},{"Xe","18"},{"Cs","1"},{"Ba","2"},{"La","-11"},{"Ce","-12"},{"Pr","-13"},{"Nd","-14"},
            {"Pm","-15"},{"Sm","-16"},{"Eu","-17"},{"Gd","-18"},{"Tb","-19"},{"Dy","-20"},{"Ho","-21"},{"Er","-22"},{"Tm","-23"},{"Yb","-24"},
            {"Lu","-25"},{"Hf","4"},{"Ta","5"},{"W","6"},{"Re","7"},{"Os","8"},{"Ir","9"},{"Pt","10"},{"Au","11"},{"Hg","12"},
            {"Tl","13"},{"Pb","14"},{"Bi","15"},{"Po","16"},{"At","17"},{"Rn","18"},{"Fr","1"},{"Ra","2"},{"Ac","-31"},{"Th","-32"},
            {"Pa","-33"},{"U","-34"},{"Np","-35"},{"Pu","-36"},{"Am","-37"},{"Cm","-38"},{"Bk","-39"},{"Cf","-40"},{"Es","-41"},{"Fm","-42"},
            {"Md","-43"},{"No","-44"},{"Lr","-45"},{"Rf","4"},{"Db","5"},{"Sg","6"},{"Bh","7"},{"Hs","8"},{"Mt","9"},{"Ds","10"},
            {"Rg","11"},{"Cn","12"},{"Uut","13"},{"Fl","14"},{"Uup","15"},{"Lv","16"},{"Uus","17"},{"Uuo","18"}};  //Periodic table, array of arrays that allows the program to access and show specific elements
    
    //Constructor 
    
    /**
     Constructor Method - gathers user input, checks input, assigns input to protected variables
     @return     (How to explain this)
     Pre-condition: constructor is called by harness class
     Post-condition: (Not sure, need to think about this one).
     */
    public PeriodicTable () {
        Scanner in = new Scanner(System.in);
        
        int firstElement; //Instance variables - allow the user to enter their own range of 
        int lastElement; //elements to be shown from the periodic table
        char userInput; //userInput is used to create a yes or no boolean decision
        boolean groupValidation; //the groupValidation depends on the userInput (char)
        
        System.out.println("Lan/Anth groups? Enter Y for Yes");
        userInput = in.next().charAt(0); //elicit yes or no via char
        
        System.out.println("Please enter the first Element");
        firstElement = in.nextInt(); //elicit start of range
        
        System.out.println("Please enter the second Element");
        lastElement = in.nextInt(); //elicit end of range
        
      
        
        if (userInput == 'Y' || userInput == 'y') { //By checking the users input, a boolean: groupValidation 
            groupValidation = true;                 //can be set to true or false, depending on the user input. This can later on
        } else {                                    //be checked in the printGroups method as a true or false condition.
            groupValidation = false;                //When the user input doesnt match the conditions for a true input, the program will automatically
            System.out.println("Lan/Anth groups assumed No");//set the boolean to false, and inform the user - this accounts for error's.
        }
        
        userAnswer = groupValidation;  //Constructer Assignment
        
        
        if (firstElement > 118 || firstElement < 1) { //assigns instance variable to protected variable after checking conditions
            firstEle = 1;             //the if-condition filters answers that would not fit the specifics of the periodic table (ie - there is no element zero).
            System.out.println("first input assumed as #1"); //The else condition will only be met when firstElement is a viable variable, and so the constructor can assign freely.
        } else {
            firstEle = firstElement;
        }
    
        if (lastElement <= firstElement || lastElement > 118) { //assigns instance variable to protected variable after checking conditions
            lastEle = 118;                         //the if-condition acts simmilar to the previous one, it acts as a filter.
            System.out.println("Second input assumed as #118"); //the else condition will only be met when the users original input for lastElement is eligible.
        } else {
            lastEle = lastElement;
        }
        
        
        
    }
    
   
     
   

    /**
     PrintGroups Method - what does it do?
     @param (not sure yet)
     @return Outputted text, void return
     Pre-condition:
     Post-condition:
     */

    
    public void printGroups() {
        int column;
        if (userAnswer = true) {
        System.out.print(userAnswer);
        System.out.print("\n\n");//separates the groups from the main table
    
            while(firstEle<lastEle)//we use firstEle instead of curEle as it hold where the user wanted to start and has been altered
            {
                column = Integer.parseInt(table[firstEle][1]);//converts string column to an int

                if(column<-1)//checks if column is negative as if it is, its part of the Lan\Act groups
                {
                    System.out.print(firstEle+1 +" " + table[firstEle][0] + "\t");
                    if(column == -25)//creates a new line when the row finishes
                    {
                        System.out.print("\n");
                    }
                }
                firstEle++;
            }
        }
 
        
        
}
        

    
    /**
     PrintTables Method - what does it do?
     @return Outputted text, void return
     Pre-condition: Periodic Table object initialised & constructed.
     Post-condition: Elements within array (table) returned as output, formatted.
     */
    public void printTables() {
        int column;
        int curColumn;
        int curEle;
        int finalEle;
        
        curEle = (firstEle - 1);
        finalEle = (lastEle - 1);
        curColumn = 1;
        
        if(curEle>56 && curEle<71)//we dont want our table to print these elements yet as we intend to print them later
        {
            curEle = 71;
        }
        else if(curEle>88 && curEle<103)
        {
            curEle = 103;
        }
        
        while(curEle <= finalEle)//table will run until last ele is displayed
        {
            column = Integer.parseInt(table[curEle][1]);//converts string column to an int

            while(curColumn < column )//formats/spaces the table for the next element to be printed
            {
                System.out.print("\t");
                curColumn++;
            }
            

            System.out.print(curEle+1 +" " + table[curEle][0]);           
            curEle++;
            

            if(curColumn == 18)//once the end of the column if reached a new line is created
            {
                System.out.print("\n");
                curColumn = 1;
            }
            else if(curEle == 56)//makes the program skip over the Lan/Act groups and is part of the if statement for optimization (to reduces the amount of times this is checked)
            {
                curEle = 71;
            }
            else if(curEle == 88)
            {
                curEle = 103;
            }
        }
    }
    
    
}
